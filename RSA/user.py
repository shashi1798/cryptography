
def encrypt(s):
    s = s.lower()
    num = 0
    l = len(s)
    p = 1
    for i in range(l - 1, -1, -1):
        if s[i] == ' ':
            num += p*26
        elif s[i] == ',':
            num += p*27
        elif s[i] == '.':
            num += p*28
        elif s[i] == '?':
            num += p*29
        elif (ord(s[i]) - ord('a')) >= 0 and (ord(s[i]) - ord('a')) < 26:
            num += p*(ord(s[i]) - ord('a'))
        else:
            return -1
        p *= 30
    return num

def decrypt(num):
    s = ""
    while num > 0:
        rem = num % 30
        if rem == 26:
            s = ' ' + s
        elif rem == 27:
            s = ',' + s
        elif rem == 28:
            s = '.' + s
        elif rem == 29:
            s = '?' + s
        else:
            s = chr(ord('a') + rem) + s
        num = num // 30
    return s

def main():
    myPrivateKey = 48494745479157554229222005881659469831008096697357749168300712121308632725590506579512027826957898161643495425302366396366653704888125756979883739242244420967674041367581214336514752069695307910606181854462432192263577252311929581034566010249106653721583649702086698189160231340060454935029307637646321273202555161108203093007516346081453062452434811100877278243426673741194814188023177298118265128768672490581641064410256196976382737689412272133091004114556761100297710832329414114109197694791005271603600484644031670113088102366724658908249376436877756784955347944619303536247684634862452279928797436235669931895715629152603091178294354906599497688516252438414032966212180697437365531705810479968618510999069897670976862995385336545950103561442437330328908220541525548525929776542025756327041151983342899506120937297092450070189022638096147814811873652651781401570539279292791622200709785324917936105985476188171989216779466089245255436075480613583379021025920711839647217316937760944321170936821584157984960974659569668826856441981636231795665071744274674269376409804639190676403018333047432139714770130389702621048282612095802419437442844031567607308239076573467535129424810101590930613900866073045904580414977984394183318833571445098122910446681865529526048680193903700046540601323559467731453428157743806789583144599977598360639076562583492353515922632660812209001918270749843160350554950231063365617183338310175518432510171556987699325295419131317009715235793501515963708048008146726877224123315254251769417809017865531015214185717154927788636089717966369242555694266032731285559547267591064883100371655151515348883307353266916834371182932969020112591270442377297058982460917799708976405731897649701398862157939624119560939728675616851297130147199464967709755736189338336878500275447585518919844165709052252203486093487328248466156618672063143065296685695528319088187149069828248768241797087463231281311132299338844154069091218268877758671959685075115327658284790858410352630345031848925634251469
    myPublicKey = 580902354228681119631618333395491296124623880747721711229011653764976240374275779904526883154341785780255093324963291350679885349398391902835785939597209320096172398710141247787574924602602198028484194781875189541286095479575181647729304053551111023775397867387370935661674143513902062530133511966969030301610167182282442251059883075977551755116505386252557319112359092226171154516439024856346735787782169689368602366481805090614272893783791216103630242909216083032715828387346673445059979267670492210982764502617972008080093295451935953056587005386252367197414930529564144264738949947224022260112305962703824289272903437250294524349966380643817060461028729728229925035920182918563557117047841662815332794903771663226620853590999584104165067551521999097631108694311397589904961925977624173287626907880564818286075798061804873627994037804023182970517299251700778254344828768722584658640430043901827835798974499108264465495787279539950486058661685944882940501444535031054263204750557763290232605649182469
    mySharedKey = 75945810976314852205071830194412008591285684811911341119374309120965902350878738545545733204525427902282732277060325334083750983010945224105952778491481905775124935674502528151372792297852737379068495460611457688301638081428644629629626324676024626941786206749834776925523123861239603872580657298482757590779637019095379829229940250221993907936656572708091486733046339137664718843067695854306247296357968555678873552417715353064083875365393341121314593538902622608734996135243669896522024680830069116890775751365501000369829378591656523323853831811866233201548963697826361302844882240519603678607371258656752598333097261104733450401319696082619033716491992851528442472660067682070645975486965818725155672692628259389360787573473899657185503501520194175647750664728626652425960903318671982503458048302585280533378812150686188801611891216574211110494166525852336843853433167148854501977304625279147399292710548423602802378660933091243851410058788440857938978305319312063668851682171447600217149993809036895112900185387042310424484893417714715822615447499713816487608089412930021137320602066514329140850624920707629496249659430018602857518698676196819767869456670505372974408661416074606462657410575768390199005279265642828505476799920808325398595829545897002854033176822643810494769998582804401347504394012988252904995976395415789116312517235523229961822460286995138970776192768819196956762124900557695190457980929886567446578182070468433846895114670937872136605935688623462435574584072846381955546200402807427208186406125332496438583990439739801362270030249866243257198948775485125646799659487978907069928022261905868076241448424271926813391994125337091476054964556926057882167525070540587339788959355768326247330480128413452886855246394729757490414923350204851086600043265670950294575641841858997966223580723185388889509558345670111945384776104115794291457319745923175620913911157107357755809715210034278236467303852862954372089653771601961276507587411467959397721594776958881552131852374215083019703249

    hisPublicKey = 134463043999335098733673081051883468073530260778191598947829720563013500021552735723711007338750627083334536472162755274553553588946149737216698418197258420316276234155064394689779475193747230986738453853528340993772328135725359521802207245072563162418869455712490533200145453310935273920821766961049199728013561965022261452663737999453772699576728485458032958707746384502341970304063522662523544297445845341040504941348775541762133455494077537390428213496189216095687520421063660741388096701799361687039824313672879360670970909668121053641709775533842104500767378924812120254292168756349868300939412919546221904272111490421473897583566383893354051739824028523224610623204158403544844884473363119086696174714623935887959459026478759076956213807407889964512398691527217329816946009530253498453544726955964812108431562277468372699445640116347805388271022234926936777813692957006565124739890672048248112208805507996075430260627470000522249445652573135678899129656583309715183980588484315040728502519310237
    hisSharedKey = 90593304910229441759218823056870947120228737828098715332394331965460814129955151033071784446448241774260491090195840308820469917362108205580645133598806916649921852091019032764202737097781431381574187343076992126676679996222994836501170110453896799690017356474762372988703229862213350838805154865597647376400306566332225518152133306877533214458507534585387545677001431029186954355459711245095226057085545993987699160629952853967522326373914656649434313102021207944407778988594307024533102536199734350906029751100911881816107150748806273789762066126316570363532395233398842717854535819734648141705869886220404360908328327717139624348383062949965574561164394296214632344937192225311275013217104887189102499652511564086778435594024599868432103955576212419107133367491310649101986513749313330477209411778045612321257058661279260170860476963972679503730590488987775640254016294166614910489732158453252487066719275794356019853618320491365071162744867170992957760256959576388355639454748079778965649627342676813081059345772468772244059346306356602647854997548743303721451497818581294054836836296469637584850843271016781769501789286340237026255575300289645034185387778496512863272151516961142193686286200758803142505574257342817687013729440170888368547306354895272579776058176676085586053147145793137993248361053528464777566756040688250351839084350601306614679102125148061467402552923080910852936294430918883601999138334211191329930197503985470021339131809046445740413799469999810983165664576163647704631453253347655040217898101056261213517400449281272297738174916764854784730903515280524093134076800683907347752998025564893868895091116349671066271103631320745291604918092568263111243620939985681872516668094928804618067386429856476103260245537615920979809501932889817763640820522234918558934583210311039468891873152516331834998888011138778262181193495379905228214375715826159891956554185863540086861700166431372733438035321902540244666581809168514553543577938389785809477756150804117088105078836816195405105547
    while True:
        print("What do you want to do?")
        print("1. Encrypt a message")
        print("2. Decrypt a message")
        print("3. Exit")
        ch = input()
        if ch == "1":
            print("Enter a message: ", end="")
            msg = input()
            m = encrypt(msg)
            c = pow(m, hisPublicKey, hisSharedKey)
            print("Here's your secret message.")
            print(c)
            print()
            print("Do you want to send or receive any more messages?(y/n)")
            ch2 = input()
            if ch2 == "n" or ch2 == "N":
                break
        elif ch == "2":
            print("Enter the encoded message: ", end="")
            c = int(input())
            m = pow(c, myPrivateKey, mySharedKey)
            msg = decrypt(m)
            print("Here's your message")
            print(msg)
            print()
            print("Do you want to send or receive any more messages?(y/n)")
            ch2 = input()
            if ch2 == "n" or ch2 == "N":
                break
        elif ch == "3":
            break
        else:
            print("Invalid Choice!")

if __name__ == '__main__':
    main()